// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nightclub.Data;

#nullable disable

namespace NightClub.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NightClub.Models.Client", b =>
                {
                    b.Property<int>("IdClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClient"));

                    b.Property<string>("EmailClient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<string>("PasswordClient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdClient");

                    b.HasIndex("IdUser");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("NightClub.Models.Event", b =>
                {
                    b.Property<int>("IdEvent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEvent"));

                    b.Property<DateOnly>("DateEvent")
                        .HasColumnType("date");

                    b.Property<string>("MaximumClientCapacity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEvent");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("NightClub.Models.HealthcareProvider", b =>
                {
                    b.Property<int>("IdHealthcareProvider")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHealthcareProvider"));

                    b.Property<string>("NameHealthcareProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PhoneEmergency")
                        .HasColumnType("bigint");

                    b.HasKey("IdHealthcareProvider");

                    b.ToTable("HealthcareProviders");
                });

            modelBuilder.Entity("NightClub.Models.HistoryClientVisit", b =>
                {
                    b.Property<int>("IdClientVisits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClientVisits"));

                    b.Property<TimeOnly>("DateJoin")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("DateOut")
                        .HasColumnType("time");

                    b.Property<int>("IdClient")
                        .HasColumnType("int");

                    b.Property<int>("IdEvent")
                        .HasColumnType("int");

                    b.HasKey("IdClientVisits");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdEvent");

                    b.ToTable("HistoryClientVisitss");
                });

            modelBuilder.Entity("NightClub.Models.SchedulesWorker", b =>
                {
                    b.Property<int>("IdSchedule")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSchedule"));

                    b.Property<TimeOnly>("DateEndWork")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("DateStartWork")
                        .HasColumnType("time");

                    b.Property<int>("IdEvent")
                        .HasColumnType("int");

                    b.Property<int>("IdWorker")
                        .HasColumnType("int");

                    b.HasKey("IdSchedule");

                    b.HasIndex("IdEvent");

                    b.HasIndex("IdWorker");

                    b.ToTable("SchedulesWorkers");
                });

            modelBuilder.Entity("NightClub.Models.StatusWorker", b =>
                {
                    b.Property<int>("IdStatusWorker")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStatusWorker"));

                    b.Property<string>("NameStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdStatusWorker");

                    b.ToTable("StatusWorkers");
                });

            modelBuilder.Entity("NightClub.Models.Ticket", b =>
                {
                    b.Property<int>("IdTicket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTicket"));

                    b.Property<int>("IdClient")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTicket");

                    b.HasIndex("IdClient");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("NightClub.Models.TypeDocument", b =>
                {
                    b.Property<int>("IdTypeDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTypeDocument"));

                    b.Property<string>("NameTypeDocument")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTypeDocument");

                    b.ToTable("TypeDocuments");
                });

            modelBuilder.Entity("NightClub.Models.TypeMoney", b =>
                {
                    b.Property<int>("IdTypeMoney")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTypeMoney"));

                    b.Property<string>("NameTypeMoney")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTypeMoney");

                    b.ToTable("TypeMoneys");
                });

            modelBuilder.Entity("NightClub.Models.TypesWorker", b =>
                {
                    b.Property<int>("IdTypesWorker")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTypesWorker"));

                    b.Property<string>("NameTypeWorker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("SalaryForHour")
                        .HasColumnType("real");

                    b.Property<int>("idTypeMoney")
                        .HasColumnType("int");

                    b.HasKey("IdTypesWorker");

                    b.HasIndex("idTypeMoney");

                    b.ToTable("TypesWorkers");
                });

            modelBuilder.Entity("NightClub.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"));

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdTypeDocument")
                        .HasColumnType("int");

                    b.Property<string>("NameUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurnameUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUser");

                    b.HasIndex("IdTypeDocument");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NightClub.Models.Worker", b =>
                {
                    b.Property<int>("IdWorker")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdWorker"));

                    b.Property<int>("IdHealthcareProviders")
                        .HasColumnType("int");

                    b.Property<int>("IdStatusWorker")
                        .HasColumnType("int");

                    b.Property<int>("IdTypesWorker")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.HasKey("IdWorker");

                    b.HasIndex("IdHealthcareProviders");

                    b.HasIndex("IdStatusWorker");

                    b.HasIndex("IdTypesWorker");

                    b.HasIndex("IdUser");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("NightClub.Models.Client", b =>
                {
                    b.HasOne("NightClub.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NightClub.Models.HistoryClientVisit", b =>
                {
                    b.HasOne("NightClub.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NightClub.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("IdEvent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("NightClub.Models.SchedulesWorker", b =>
                {
                    b.HasOne("NightClub.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("IdEvent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NightClub.Models.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("IdWorker")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("NightClub.Models.Ticket", b =>
                {
                    b.HasOne("NightClub.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("NightClub.Models.TypesWorker", b =>
                {
                    b.HasOne("NightClub.Models.TypeMoney", "TypeMoney")
                        .WithMany()
                        .HasForeignKey("idTypeMoney")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeMoney");
                });

            modelBuilder.Entity("NightClub.Models.User", b =>
                {
                    b.HasOne("NightClub.Models.TypeDocument", "TypeDocument")
                        .WithMany()
                        .HasForeignKey("IdTypeDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeDocument");
                });

            modelBuilder.Entity("NightClub.Models.Worker", b =>
                {
                    b.HasOne("NightClub.Models.HealthcareProvider", "HealthcareProvider")
                        .WithMany()
                        .HasForeignKey("IdHealthcareProviders")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NightClub.Models.StatusWorker", "StatusWorker")
                        .WithMany()
                        .HasForeignKey("IdStatusWorker")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NightClub.Models.TypesWorker", "TypesWorker")
                        .WithMany()
                        .HasForeignKey("IdTypesWorker")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NightClub.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthcareProvider");

                    b.Navigation("StatusWorker");

                    b.Navigation("TypesWorker");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
